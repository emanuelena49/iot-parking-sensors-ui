{"version":3,"sources":["components/StreamingVideoPlayer/StreamingVideoPlayer.jsx","utils/round.js","components/DistanceNumbers/DistanceMQTTClient.jsx","components/DistanceNumbers/DistanceNumbers.jsx","config.js","App.js","reportWebVitals.js","index.js"],"names":["StreamingVideoPlayer","props","state","width","height","updateWindowDimensions","bind","frameRatio","frameWidth","frameHeight","this","window","addEventListener","removeEventListener","document","getElementById","clientWidth","clientHeight","setState","containerClass","className","id","src","source","alt","Component","defaultProps","round","number","nDecimalValues","parseFloat","pow","Math","DistanceMQTTClient","value","newValue","newValueStr","toString","i","length","mqtt","require","client","connect","brokerAddress","thisObject","topicName","on","subscribe","err","console","error","log","topic","message","updateValue","parseInt","unsubscribe","DistanceLabel","name","children","DistanceNumbers","topicNames","config","App","video","address","topics","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.67e5aaa5.chunk.js","sourcesContent":["import { Component } from \"react\";\r\nimport './StreamingVideoPlayer.scss';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\n/**\r\n * Just the streaming video player which displays the real time video\r\n * \r\n * @arguments {Component<Props, State>}\r\n */\r\nclass StreamingVideoPlayer extends Component {\r\n\r\n    static propTypes = {\r\n        frameWidth: PropTypes.number, \r\n        frameHeight: PropTypes.number, \r\n        source: PropTypes.string, \r\n    }\r\n\r\n    static defaultProps = {\r\n        frameWidth: 640, \r\n        frameHeight: 480, \r\n        source: \"https://upload.wikimedia.org/wikipedia/commons/5/5c/640x480-afframont_ujamondrone_leitosa.JPG\"\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { \r\n            /** current component width */\r\n            width: 0, \r\n            /** current component height */\r\n            height: 0 \r\n        };\r\n\r\n        // update component w. and h. when window resizes\r\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\r\n\r\n        // calculate the frame ratio\r\n        this.frameRatio = props.frameWidth/props.frameHeight;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateWindowDimensions();\r\n        window.addEventListener('resize', this.updateWindowDimensions);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.updateWindowDimensions);\r\n    }\r\n\r\n    updateWindowDimensions() {\r\n        // this.setState({\r\n        //     width: window.innerWidth, \r\n        //     height: window.innerHeight \r\n        // });\r\n\r\n        let width = document.getElementById('video-player').clientWidth;\r\n        let height = document.getElementById('video-player').clientHeight;\r\n\r\n        this.setState({\r\n            width: width, \r\n            height: height, \r\n        });\r\n    }\r\n\r\n    render() {\r\n        let currentWindowRatio = this.state.width/this.state.height;\r\n        let containerClass;\r\n        \r\n        if (currentWindowRatio<=this.frameRatio) {\r\n            containerClass = \"frame-container-1\";\r\n        } else {\r\n            containerClass = \"frame-container-2\";\r\n        }\r\n        \r\n        return (\r\n            <div className=\"streaming-video-player\" id=\"video-player\">\r\n                <div className={\"frame-container \" + containerClass}>\r\n                    <img src={this.props.source} alt=\"No video available!\" /> \r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StreamingVideoPlayer;\r\nexport {StreamingVideoPlayer};","\r\n/**\r\n * Round a number \r\n * \r\n * @param {Number} number <- the number you want to round\r\n * @param {Number} nDecimalValues <- how many decimal values you want to keep\r\n * @returns {Number} the rounded number\r\n */\r\nfunction round(number, nDecimalValues=0) {\r\n    if (typeof(number) !== 'number') {\r\n        number = parseFloat(number);\r\n    }\r\n\r\n    let pow = Math.pow(10, nDecimalValues);\r\n    return Math.round(number * pow) / pow;\r\n}\r\n\r\nexport default round;\r\nexport {round};","import { Component } from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport round from \"../../utils/round\";\r\n// var client = mqtt.connect(\"ws://test.mosquitto.org:8883\");\r\n\r\n\r\n/**\r\n * An mqtt client which displays an updated distance value \r\n * (retrieved from an mqtt topic's messages)\r\n * \r\n * @augments {Component<Props, State>}\r\n */\r\nclass DistanceMQTTClient extends Component {\r\n\r\n    static propTypes = {\r\n        topicName: PropTypes.string, \r\n        brokerAddress: PropTypes.string, \r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            /** the last value received from mqtt topic */\r\n            value: \"-.--m\", \r\n        };\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {String} newValue <- new value you want to print\r\n     */\r\n    updateValue(newValue) {\r\n\r\n        // let newValueStr = newValue;\r\n\r\n        // value in meters (and rounded)\r\n        newValue = round(newValue/100, 2);\r\n\r\n        // TODO: real code for real mqtt client\r\n            \r\n        // get recieved value as str\r\n        let newValueStr = newValue; newValue.toString();\r\n\r\n        // add missing zeros\r\n        for (let i=newValueStr.length; i<4; i++) {\r\n            newValueStr += \"0\";\r\n        }\r\n\r\n        // add measure units (meters)\r\n        newValueStr += \"m\";\r\n\r\n        // set the new value (update state so component will re-render)\r\n        this.setState({\r\n            value: newValueStr, \r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        // alert(\"ok\");\r\n        this.mqtt = require('mqtt');\r\n        this.client  = this.mqtt.connect(this.props.brokerAddress);\r\n        \r\n        let thisObject = this;\r\n        let topicName = this.props.topicName;\r\n\r\n        // connect and subscribe\r\n        this.client.on('connect', function () {\r\n            thisObject.client.subscribe(topicName, function (err) {\r\n              if (!err) {\r\n                // client.publish('presence', 'Hello mqtt');\r\n                console.log(\"ok, subscribed to \" + topicName);\r\n              } else {\r\n                console.error(\"cannot subscribe to \" + topicName, err);\r\n              }\r\n            })\r\n        });\r\n\r\n        // listen for messages\r\n        this.client.on('message', function (topic, message) {\r\n\r\n            // alert(topic, message);\r\n\r\n            // alert(\"received \" + message + \" on \" + topic);\r\n            if (topic === topicName) {\r\n                // when I recieved message on this topic I update the component\r\n                thisObject.updateValue(parseInt(message));\r\n            }\r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        // (unsubscribe)\r\n        this.client.unsubscribe(this.props.topicName);\r\n    }\r\n    \r\n    render () {\r\n        // just print (a fresh) value\r\n        // (it will re-render every time I recieve a message)\r\n        return <span>{this.state.value + \"\"}</span>;\r\n    }\r\n}\r\n\r\nexport default DistanceMQTTClient;\r\nexport {DistanceMQTTClient};","import {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport DistanceMQTTClient from './DistanceMQTTClient';\r\nimport './DistanceNumbers.scss';\r\n\r\n/**\r\n * The single label. It has a name and a className and contains a \r\n * generic child.\r\n * \r\n * @arguments {Component<Props, State>}\r\n */\r\nclass DistanceLabel extends Component {\r\n\r\n    static propTypes = {\r\n        name: PropTypes.string, \r\n        className: PropTypes.string, \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={\"distance-label \" + this.props.className}>\r\n                <div className=\"distance-label-name\">\r\n                    {this.props.name}\r\n                </div>\r\n                <div className=\"distance-label-value\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * A fixed bottom bar which displays the 3 distances\r\n * \r\n * @arguments {Component<Props, State>}\r\n */\r\nclass DistanceNumbers extends Component {\r\n\r\n    static propTypes = {\r\n        topicNames: PropTypes.object, \r\n        brokerAddress: PropTypes.string, \r\n    }\r\n\r\n    static defaultProps = {\r\n        topicNames: {\r\n            \"left\": \"/distances/left\", \r\n            \"center\": \"/distances/center\", \r\n            \"right\": \"/distances/right\"\r\n        }, \r\n        brokerAddress: \"mqtt://192.168.1.133:8883\"\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"distance-numbers-bar\">\r\n                <div className=\"distance-labels-container\">\r\n                    <DistanceLabel name={\"left\"} className=\"distance-label-left\" >\r\n                        <DistanceMQTTClient topicName={this.props.topicNames[\"left\"]} \r\n                            brokerAddress={this.props.brokerAddress} />\r\n                    </DistanceLabel>\r\n                    <DistanceLabel name={\"center\"} className=\"distance-label-center\" >\r\n                        <DistanceMQTTClient topicName={this.props.topicNames[\"center\"]} \r\n                            brokerAddress={this.props.brokerAddress} />\r\n                    </DistanceLabel>\r\n                    <DistanceLabel name={\"right\"} className=\"distance-label-right\" >\r\n                        <DistanceMQTTClient topicName={this.props.topicNames[\"right\"]} \r\n                            brokerAddress={this.props.brokerAddress} />\r\n                    </DistanceLabel>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DistanceNumbers;\r\nexport {DistanceNumbers};","var config = {\r\n    \"mqtt\": {\r\n        \"address\": \"mqtt://192.168.1.133:8883\", \r\n        \"topics\": {\r\n            \"left\": \"/distances/left\", \r\n            \"center\": \"/distances/center\", \r\n            \"right\": \"/distances/right\"\r\n        }\r\n    }, \r\n    \"video\": {\r\n        \"address\": \"https://images2-corrieredelveneto.corriereobjects.it/methode_image/2021/03/23/Treviso%20Belluno/Foto%20Trattate/accoltellamento%20mogliano-kHv-U460802138672084hjB-640x480@CorriereVeneto-Web-Veneto.jpg?v=202103240900\", \r\n        \"width\": 640,\r\n        \"height\": 480\r\n    }\r\n};\r\n\r\nexport default config;\r\nexport {config};","import './App.scss';\r\nimport { Component } from 'react';\r\nimport StreamingVideoPlayer from './components/StreamingVideoPlayer/StreamingVideoPlayer';\r\nimport DistanceNumbers from './components/DistanceNumbers/DistanceNumbers';\r\nimport config from './config';\r\n\r\nclass App extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"video-container\">\r\n          <StreamingVideoPlayer source={config.video.address} \r\n            frameWidth={config.video.width} frameHeight={config.video.height} />\r\n        </div>\r\n        <div className=\"distance-container\">\r\n          <DistanceNumbers brokerAddress={config.mqtt.address}\r\n            topicNames={config.mqtt.topics} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}